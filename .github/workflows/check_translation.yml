# This is a basic workflow to help you get started with Actions

name: Check format

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: 
    - master 
    - develop
  pull_request:
    branches: 
    - master 
    - develop

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  check_translation:
    name: Check format
    runs-on: ubuntu-18.04
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
#     Runs a set of commands using the runners shell
    - name: Setup python3
      uses: actions/setup-python@v1
      with:
        python-version: 3.6
    - name: Run get_files for base
      if: github.event_name == 'pull_request'
      run: |
        git fetch origin $GITHUB_BASE_REF:$GITHUB_BASE_REF -q
        files=$(git diff --name-only $GITHUB_BASE_REF)
        echo $files
    - name: Run get_files for current
      if: github.event_name == 'push'
      run: |
        git fetch origin $GITHUB_REF:$GITHUB_REF -q
        files=$(git diff --name-only $GITHUB_REF)
        echo $files
      env:
        GITHUB_CONTEXT: $files
    - name: Run check_translation 
      run: |
        import os
        import subprocess
        import re
        pattern = re.compile(r"_\(([\"']{,3})(?P<message>((?!\1).)*)\1(\s*,\s*context\s*=\s*([\"'])(?P<py_context>((?!\5).)*)\5)*(\s*,\s*(.)*?\s*(,\s*([\"'])(?P<js_context>((?!\11).)*)\11)*)*\)")
        temp = re.compile(r"_\(([\"']{,3})")
        subprocess.run('git fetch origin '+os.environ['GITHUB_BASE_REF']+ ' :' +os.environ['GITHUB_BASE_REF']+ '-q', shell=True)
        files = subprocess.check_output('git diff --name-only '+os.environ['GITHUB_BASE_REF'], shell=True)
        files = files.decode('utf-8')
        files = files.split()
        for file in files:
          with open(file, 'r') as f:
            for num, line in enumerate(f, 1):
              all_matches = temp.finditer(line)
              if all_matches:
                for match in all_matches:
                  verify = pattern.search(line)
                  if not verify:
                    print(num)
                    print(line)
      shell: python 
